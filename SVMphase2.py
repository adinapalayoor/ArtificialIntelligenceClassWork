import pandas as pdfrom sklearn.model_selection import train_test_splitfrom sklearn.svm import SVCfrom sklearn.preprocessing import StandardScalerfrom sklearn.metrics import accuracy_score, recall_scorefrom sklearn.model_selection import GridSearchCVdef main():    # Reading the dataset    dataset = pd.read_csv("cardio_train.csv", delimiter=";")    # Split the data into features and target label    x = dataset.drop(columns="id")    y = dataset["cardio"].values    # Create a test set and a training set    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.15, random_state=56)    # Normalize the data    scaler = StandardScaler().fit(x_train)    x_train = scaler.transform(x_train)    x_test = scaler.transform(x_test)    # Test the model with different kernels, C, and gamma values to find the best model    parameters = {'C': [0.1, 1, 10, 100, 1000], 'gamma': [0.1, 0.01, 0.001, 0.0001]}    svm_model = SVC(kernel="rbf")    # Use the grid search to find the best model and then use that model to predict the test set. Grid search uses    # cross validation to find the best model and then uses that model to predict the test set    grid_search = GridSearchCV(svm_model, parameters, cv=5, refit=True)    grid_search.fit(x_train, y_train)    best_model = grid_search.best_estimator_        # Print the accuracy and recall of the best model    svm_preds = best_model.predict(x_test)    print("Accuracy:", accuracy_score(y_test, svm_preds))    print("Recall:", recall_score(y_test, svm_preds))        # Creates a dataframe of the results of the grid search to help find the most effective and accurate model    testdf = pd.DataFrame(grid_search.cv_results_)    testdf = testdf.sort_values("rank_test_score")    testdf.to_csv("GRIDSEARCH_results.csv")if __name__ == "__main__":    main()