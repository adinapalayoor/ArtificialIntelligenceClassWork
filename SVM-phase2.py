import pandas as pdimport numpy as npimport matplotlib.pyplot as pltfrom sklearn.model_selection import train_test_splitfrom sklearn.svm import SVCfrom sklearn.decomposition import PCAfrom sklearn.preprocessing import StandardScalerfrom sklearn.metrics import accuracy_score, recall_scorefrom sklearn.model_selection import GridSearchCVdef plot_decision_boundary(X, y, clf, title='SVM Decision Boundary'):    h = .02  # step size in the mesh    # create a mesh to plot in    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1    xx, yy = np.meshgrid(np.arange(x_min, x_max, h),                         np.arange(y_min, y_max, h))    plt.subplot(1, 1, 1)    Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])    Z = Z.reshape(xx.shape)    plt.contourf(xx, yy, Z, cmap=plt.cm.coolwarm, alpha=0.8)    plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.coolwarm)    plt.xlabel('Principal Component 1')    plt.ylabel('Principal Component 2')    plt.xlim(xx.min(), xx.max())    plt.ylim(yy.min(), yy.max())    plt.title(title)    plt.show()"""Used a for loop to test the accuracy of each feature individually. Then used the top features with the highest accuracy to train the model. Now the model is trained with the top features using grid search to find the best parameters. Moving forward I will create a new feature called BMI and use that to train the model and see if it improves the accuracy."""def main():    dataset = pd.read_csv("cardio_train.csv", delimiter=";")    X = dataset.drop(columns="id")    y = dataset["cardio"].values    # Normalize the data    scaler = StandardScaler()    X = scaler.fit_transform(X)    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15)    parameters = {'C': [0.1], 'gamma': [0.0001]}    svm_model = SVC(kernel="rbf")    grid_search = GridSearchCV(svm_model, parameters, cv=5, refit=True)    grid_search.fit(X_train, y_train)    best_model = grid_search.best_estimator_    svm_preds = best_model.predict(X_test)    print("Accuracy:", accuracy_score(y_test, svm_preds))    print("Recall:", recall_score(y_test, svm_preds))if __name__ == "__main__":    main()